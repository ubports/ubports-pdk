#!/usr/bin/env bash

set -e

TMPDIR=""

trap ctrl_c INT

function ctrl_c {
    printf "\n\nCTRL-C received\n"
    for JOB in $(jobs -p); do
        kill -9 "$JOB"
    done
    exit 1
}

if [ "$(uname -m)" == "aarch64" ] || [ "$(uname -p)" == "arm64" ]  || [ "$(uname -m)" == "arm64" ]; then
    HOST_ARCH="arm64"
else
    HOST_ARCH="amd64"
fi

SCRIPTPATH="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"

PULL_IMG=no
SETUP=no
CLEARCACHE=no
LIST=no
RUN=no
PRINT_VERSION=no
NAME=default
GUI=gtk
ARCH="$HOST_ARCH"
RELEASE=focal

function printHelp {
    printf "usage: %s <options> <command> [<command> ..]\n\n" "$0"
    printf "Options:\n"
    printf "\t-a=|--arch=:    Architecture override (optional, defaults to '%s')\n" "$HOST_ARCH"
    printf "\t                Possible values: arm64, amd64\n"
    printf "\t-g=|--gui=:     Type of GUI when spawning QEMU window (optional, defaults to 'gtk')\n"
    printf "\t                Possible values: gtk, sdl\n"
    printf "\t-n=|--name=:    Name of the image (optional, defaults to 'default')\n"
    printf "\t-r=|--release=: Ubuntu Touch release override (optional, defaults to 'focal')\n"
    printf "\t                Possible values: 24.04-1.x, 20.04\n\n"
    printf "Commands:\n"
    printf "\tsetup: Host OS preparations (recommended for first-time use)\n"
    printf "\tclear: Clean up all images\n"
    printf "\tpull: Download pre-generated image\n"
    printf "\trun: Run desired image\n"
    printf "\tlist: Show list of cached images\n"
}

# Argument parsing
while [[ $# -gt 0 ]]; do
    arg="$1"
    case $arg in
        pull)
            PULL_IMG=yes
            shift
        ;;
        setup)
            SETUP=yes
            shift
        ;;
        clear)
            CLEARCACHE=yes
            shift
        ;;
        easy)
            SETUP=yes
            PULL_IMG=yes
            shift
        ;;
        list)
            LIST=yes
            shift
        ;;
        run)
            RUN=yes
            shift
        ;;
        -v|--version)
            PRINT_VERSION=yes
            shift
        ;;
        "-g="*|"--gui="*)
            GUI="${arg#*=}"
            shift
        ;;
        "-n="*|"--name="*)
            NAME="${arg#*=}"
            shift
        ;;
        "-a="*|"--arch="*)
            ARCH="${arg#*=}"
            shift
        ;;
        "-r="*|"--release="*)
            RELEASE="${arg#*=}"
            shift
        ;;
        -h|--help)
            printHelp
            exit 0
        ;;
        *)
            printHelp
            exit 1
        ;;
    esac
done

# Read common script variables
source "$SCRIPTPATH/scripts/vars.sh"
initCommonVars
mkdir -p "$CONFIG_ROOT"

# Source the config if available
if [ -f "$CONFIG_ROOT/config.sh" ]; then
    # shellcheck source=/dev/null
    source "$CONFIG_ROOT/config.sh"
    IMG_CACHE="$DATA_ROOT/pdk-image-cache"
fi

if [ "$PRINT_VERSION" == "yes" ]; then
    printf "%s (%s)" "$VERSION" "$CODENAME"
    exit 0
fi

function printSeparator {
    printf "#####################################\n"
}

printSeparator
printf "Ubuntu Touch Platform Development Kit\n"
printSeparator
printf "\nExecuting tasks:\n"
printf "\tSetup? %s\n" "$SETUP"
printf "\tClear cache? %s\n" "$CLEARCACHE"
printf "\tList? %s\n" "$LIST"
printf "\tPull image? %s\n" "$PULL_IMG"
printf "\tRun an image? %s\n\n" "$RUN"

source "$SCRIPTPATH/scripts/caches.sh"
source "$SCRIPTPATH/scripts/setup.sh"
source "$SCRIPTPATH/scripts/images.sh"
source "$SCRIPTPATH/scripts/mounts.sh"
initImageVars
initSettingsVars

if [ -z "$DATA_ROOT" ] || [ "$SETUP" == "yes" ]; then
    # Warn when something's not right
    if [ -z "$DATA_ROOT" ]; then
        printf "WARNING: You haven't set up your environment yet. Continuing with setup...\n"
    fi
    setup
    generateSettingsImage
    copySettingsIntoImage
fi

# List available images
if [ "$LIST" == "yes" ]; then
    listImages
fi

# Clear the cache
if [ "$CLEARCACHE" == "yes" ]; then
    clearCaches
fi

# Decide on pulling or creating an image
if [ "$PULL_IMG" == "yes" ]; then
    pullLatestImage
fi

# Aaand run it!
if [ "$RUN" == "yes" ]; then
    printf "\nName of the environment: %s\n\n" "$NAME"
    if [ ! -d "$IMG_CACHE/$NAME" ]; then
        printf "Cache directory for image '%s' doesn't exist.\n" "$NAME"
        printf "Consider pulling or creating an image yourself.\n"
        exit 1
    fi
    if [ ! -f "$IMG_CACHE/$NAME/hdd.raw" ]; then
        printf "Hard disk for image '%s' doesn't exist." "$NAME"
        printf "Consider pulling or creating an image yourself."
        exit 1
    fi
    startVirtiofsd
    runImage
fi

for JOB in $(jobs -p); do
    kill -9 "$JOB"
done

exit 0
